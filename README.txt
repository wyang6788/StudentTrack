William Yang

This application has been compiled with the go command and follows all of the go commands conventions e.g. these files would belong in something like $GOPATH/src/github.com/wyang6788/studentapi. The bin folder in $GOPATH will hold the executable after the command "go get" is ran to download all the necessary libraries for stuff like the router. This application utilizes a MongoDB backend, hosted locally on "mongodb://localhost". The database name is "studentapi" and all of the data is stored in the "students" collection, so these may require to be created if they do not exist locally on MongoDB. 

Some peculiarities about this implementation are that rather than holding a bson.ObjectId type for the NetID, it utilizes a string instead. This is to simplify the serialization from inserting student data with a conventional NetID of all ints and having it converted into a bson.ObjectID and vice versa. Another one is that the delete operation is routed with the year as part of the url. Hence, if we wanted to delete all instances of data with a year below 2000, we'd use an http delete request at "localhost://8080/Student/2000". The years available for deletion range from 0 to 3000. Also, the default port that it is locally hosted on is 8080. 

The parsing is done mainly with encoding/json. The data used for the most part is all json, minus the bson stored in the backend. The encoding/json library manages to serialize and deserialize the data. The data is stored by MongoDB at the backend, with the model specifications in "student.go". Searches for the data are done with MongoDB's query support with functions like Find, UpdateId, and RemoveId. The GET operation is done by utilizing Find and matching the bson of the name. The post just inserts a new entity. Update first gets the entire data set with Find, and then updates them based on the grade. Delete does practically the same thing but removes them instead. List does almost the same thing but just returns the data set. 
